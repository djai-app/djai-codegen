package {{appPackage}}.controller.api

{{#imports}}import {{import}}
{{/imports}}
{{#springdoc}}
import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.responses.ApiResponse
import io.swagger.v3.oas.annotations.responses.ApiResponses
import io.swagger.v3.oas.annotations.tags.Tag
import org.springdoc.core.converters.models.PageableAsQueryParam
{{/springdoc}}
{{^springdoc}}
import io.swagger.annotations.Api
import io.swagger.annotations.ApiOperation
import io.swagger.annotations.ApiResponse
import io.swagger.annotations.ApiResponses
import io.swagger.annotations.ApiParam
{{/springdoc}}
import org.springframework.http.HttpStatus
import org.springframework.data.domain.Page
import org.springframework.data.domain.Pageable
import org.springframework.data.domain.Sort
import org.springframework.data.web.PageableDefault
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*

{{>generatedAnnotation}}
{{#springdoc}}
@Tag(name = "{{{baseName}}}", description = "the {{{baseName}}} API")
{{/springdoc}}
{{^springdoc}}
@Api(value = "{{{baseName}}}", tags = ["{{{baseName}}}"], description = "the {{{baseName}}} API")
{{/springdoc}}
{{#operations}}
interface {{classname}} {
{{#operation}}

	{{^springdoc}}
	@ApiOperation(value = "{{{summary}}}", nickname = "{{{operationId}}}", notes = "{{{notes}}}", tags={{#vendorExtensions.x-tags}}["{{tag}}"]{{^-last}}, {{/-last}}{{/vendorExtensions.x-tags}})
	@ApiResponses({{#responses}}
		ApiResponse(code = {{{code}}}, message = "{{{message}}}"){{^-last}},{{/-last}}{{/responses}}
	)
	{{/springdoc}}
	{{#springdoc}}
	@Operation(summary = "{{{summary}}}", description = "{{{notes}}}", tags={{#vendorExtensions.x-tags}}["{{tag}}"]{{^-last}}, {{/-last}}{{/vendorExtensions.x-tags}})
	@ApiResponses({{#responses}}
		ApiResponse(responseCode = "{{{code}}}", description = "{{{message}}}"){{^-last}},{{/-last}}{{/responses}}
	)
	{{#vendorExtensions.isGetListMethod}}
	@PageableAsQueryParam
	{{/vendorExtensions.isGetListMethod}}
	{{/springdoc}}
	@{{httpMethod}}Mapping("{{{path}}}")
	fun {{vendorExtensions.operationMethodName}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{>pageParams}}{{^-last}},{{/-last}}{{/allParams}}): {{#responseWrapper}}{{.}}<{{/responseWrapper}}ResponseEntity<{{>returnTypes}}>{{#responseWrapper}}>{{/responseWrapper}} {
		return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
	}
{{/operation}}

}
{{/operations}}
