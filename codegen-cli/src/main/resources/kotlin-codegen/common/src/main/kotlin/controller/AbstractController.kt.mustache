package {{basePackage}}.controller

import {{basePackage}}.domain.BaseResource
{{#hasIdentityBlocks}}
import {{basePackage}}.domain.Identity
{{/hasIdentityBlocks}}
import {{basePackage}}.exception.InvalidRequestException
import {{basePackage}}.exception.ResourceNotFoundException
import {{basePackage}}.service.CommonService
import org.springframework.data.domain.Page
import org.springframework.data.domain.Pageable
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.util.Assert
import org.springframework.web.bind.annotation.*
{{#entityHasUUID}}
import java.util.UUID
{{/entityHasUUID}}

abstract class AbstractController<E: BaseResource, S: CommonService<E>>(val  service: S):
		CommonController<E>, CommonParameterizedController<E> {

	override fun create(domain: E): ResponseEntity<E> {
		val result = service.save(domain)?: throw InvalidRequestException()
		return ResponseEntity(result, HttpStatus.CREATED)
	}

	override fun delete(id: {{entityIdType}}): ResponseEntity<E> {
		val entity = service.getById(id)?: throw ResourceNotFoundException()
		service.delete(entity)
		return ResponseEntity(entity, HttpStatus.OK)
	}

	override fun getById(id: {{entityIdType}}): ResponseEntity<E> {
		val entity = service.getById(id)?: throw ResourceNotFoundException()
		return ResponseEntity(entity, HttpStatus.OK)
	}

	override fun getAll(search: String?, pageable : Pageable): ResponseEntity<Page<E>> {
		return ResponseEntity(service.getAll(pageable, search), HttpStatus.OK)
	}

	override fun update(id: {{entityIdType}}, domain: E): ResponseEntity<E> {
		service.getById(id)?: throw ResourceNotFoundException()
		domain.id = id
		val result = service.update(domain)?: throw InvalidRequestException()
		return ResponseEntity(result, HttpStatus.OK)
	}

	override fun modify(id: {{entityIdType}}, domain: E): ResponseEntity<E> {
		return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
	}

	override fun saveAll(domains: List<E>): List<E> {
		return service.saveAll(domains)
	}

	override fun deleteAll(@RequestParam ids: List<{{entityIdType}}>): List<E> {
		val domains = service.getByIds(ids)
		service.deleteAll(domains)
		return domains
	}

	override fun create(parentId: {{entityIdType}}, domain: E): ResponseEntity<E> {
		{{#hasIdentityBlocks}}
		if(domain.entity.parent != null) {
			domain.entity.parent!!.id = parentId
		} else {
			domain.entity.parent = Identity(id = parentId)
		}
		{{/hasIdentityBlocks}}
		val result = service.save(domain) ?: throw InvalidRequestException()
		return ResponseEntity(result, HttpStatus.CREATED)
	}

	override fun getById(parentId: {{entityIdType}}, id: {{entityIdType}}): ResponseEntity<E> {
		val domain = service.getById(id) ?: throw ResourceNotFoundException()
		{{#hasEntityBlocks}}
		Assert.isTrue(parentId == domain.entity.parent?.id, "parent $parentId is not valid")
		{{/hasEntityBlocks}}
		{{^hasEntityBlocks}}
		//TODO: should assert parent id here
		{{/hasEntityBlocks}}
		return ResponseEntity(domain, HttpStatus.OK)
	}

	override fun delete(parentId: {{entityIdType}}, id: {{entityIdType}}): ResponseEntity<E> {
		val domain = service.getById(id) ?: throw ResourceNotFoundException()
		validateParent(domain, parentId)
		service.delete(domain)
		return ResponseEntity(domain, HttpStatus.OK)
	}

	override fun update(parentId: {{entityIdType}}, id: {{entityIdType}}, domain: E): ResponseEntity<E> {
		validateParent(domain, parentId)
		domain.id = id
		val updatedEntity = service.update(domain)
		return ResponseEntity(updatedEntity, HttpStatus.OK)
	}

	override fun modify(parentId: {{entityIdType}}, id: {{entityIdType}}, domain: E): ResponseEntity<E> {
		return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
	}

	override fun saveAll(parentId: {{entityIdType}}, domains: List<E>): List<E> {
		domains.forEach {
			validateParent(it, parentId)
			{{#hasIdentityBlocks}}
			it.id = it.identity.id
			{{/hasIdentityBlocks}}
		}
		return service.saveAll(domains)
	}

	override fun deleteAll(parentId: {{entityIdType}}, ids: List<{{entityIdType}}>): List<E> {
		val entities = service.getByIds(ids)
		entities.forEach { domain ->
			validateParent(domain, parentId)
		}
		service.deleteAll(entities)
		return entities
	}

	override fun getAll(parentId: {{entityIdType}}, search: String?, pageable: Pageable): ResponseEntity<Page<E>> {
		val searchCriteria = getSearchCriteria(search, parentId)

		return ResponseEntity(service.getAll(pageable, searchCriteria), HttpStatus.OK)
	}

	private fun validateParent(domain: E, parentId: {{entityIdType}}) {
		{{#hasEntityBlocks}}
		Assert.notNull(domain.entity.parent, "parent can not be empty")
		Assert.notNull(domain.entity.parent?.id, "parent id is required")
		Assert.isTrue(parentId == domain.entity.parent?.id, "parent $parentId is not valid")
		{{/hasEntityBlocks}}
		{{^hasEntityBlocks}}
		//TODO: should check parent id here
		{{/hasEntityBlocks}}
	}

	private fun getSearchCriteria(query: String?, parentId: {{entityIdType}}): String {
		val underParentSearchCriteria = "entity.parent.id==$parentId"
		return if (query.isNullOrBlank()) {
			underParentSearchCriteria
		} else {
			"$underParentSearchCriteria;$query"
		}
	}
}
